二分查找也称折半查找，是一种基于分治思想的查找算法，其本质是寻找某关系的临界点，只要序列可以根据某关系划分为两区间，即左边部分满足条件，右边部分不满足，可以根据该算法查找临界点
具体原理:
  通过中间指针进行判断，将序列划分为两区间，多次循环此步骤，直至找到临界点
代码实现:
  int mid_search_right(int a[],int k,int n){
    int l=0,r=n-1;
    while(l<r){
        int mid=(l+r)>>1;
        if(a[mid]>=k) r=mid;
        else l=mid+1;
    }
    return l;
  }//该模板查每次将区间划分为[0,mid][mid+1,n-1],查找到的是右区间的第一个值，即序列中与<k边界相邻的>=k的元素位置
  
  int mid_search_left(int a[],int k,int n){
    int l=0,r=n-1;
    while(l<r){
        int mid=(l+r+1)>>1;//只剩两个元素的时候，需要+1,使中间指针指向r，否则会出现死循环
        if(a[mid]<=k) l=mid;
        else r=mid-1;
    }
    return l;
  }//该模板查每次将区间划分为[0,mid-1][mid,n-1],查找到的是左区间的最后一个值，即序列中与>k边界相邻的<=k的元素位置
